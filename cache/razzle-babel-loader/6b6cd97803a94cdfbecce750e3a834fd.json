{"ast":null,"code":"var _jsxFileName = \"I:\\\\developpement\\\\Js\\\\seiryu\\\\src\\\\pages\\\\LandingPage\\\\components\\\\CardSessions.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { getDate, isArrayEmpty, isNotUndefined } from \"../../../services/UtilService\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Chip from \"@material-ui/core/Chip\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport Link from \"@material-ui/core/Link\";\n\nvar CardSessions = function CardSessions(data) {\n  _s();\n\n  var sessions = data.sessions;\n  var classes = useStyles();\n\n  if (sessions === undefined || sessions.length === 0) {\n    return null;\n  }\n\n  return __jsx(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-start\",\n    alignitems: \"center\",\n    spacing: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, isNotUndefined(sessions) && !isArrayEmpty(sessions) ? sessions.map(function (session, index) {\n    var startingDate = getDate(session.createdAt);\n    var updatingDate = getDate(session.updatedAt);\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }, __jsx(Card, {\n      variant: \"outlined\",\n      className: classes.cards,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 29\n      }\n    }, __jsx(CardContent, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 33\n      }\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      color: \"primary\",\n      gutterBottom: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 37\n      }\n    }, __jsx(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 41\n      }\n    }, \" [ \", __jsx(\"em\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 52\n      }\n    }, session.campaign.name), \" ]\"), \" : \", __jsx(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 98\n      }\n    }, session.name)), __jsx(\"div\", {\n      className: classes.chips,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 37\n      }\n    }, isNotUndefined(session.players) && !isArrayEmpty(session.players) ? session.players.map(function (player, index) {\n      return __jsx(Chip, {\n        key: index,\n        label: player.name,\n        variant: \"outlined\",\n        color: \"primary\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 60\n        }\n      });\n    }) : null), __jsx(Typography, {\n      color: \"textPrimary\",\n      gutterBottom: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 37\n      }\n    }, __jsx(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 41\n      }\n    }, \"Date de d\\xE9part :\"), \" \", startingDate), __jsx(Typography, {\n      color: \"textPrimary\",\n      gutterBottom: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 37\n      }\n    }, __jsx(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 41\n      }\n    }, \"Date derni\\xE8re action :\"), \" \", updatingDate)), __jsx(CardActions, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 33\n      }\n    }, __jsx(Link, {\n      component: RouterLink,\n      to: ROUTE_GAME_BASE + '/' + session.id,\n      className: classes.allWidth,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 37\n      }\n    }, __jsx(Button, {\n      className: classes.allWidth,\n      color: \"primary\",\n      variant: \"contained\",\n      size: \"small\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 41\n      }\n    }, \"Continuer la Session\")))));\n  }) : __jsx(Skeleton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }));\n};\n\n_s(CardSessions, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", true);\n\n_c = CardSessions;\nexport default CardSessions;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardSessions\");","map":{"version":3,"sources":["I:/developpement/Js/seiryu/src/pages/LandingPage/components/CardSessions.jsx"],"names":["React","useEffect","useState","getDate","isArrayEmpty","isNotUndefined","Grid","Card","Typography","CardContent","Chip","CardActions","Button","Skeleton","Link","RouterLink","CardSessions","data","sessions","classes","useStyles","undefined","length","map","session","index","startingDate","createdAt","updatingDate","updatedAt","cards","campaign","name","chips","players","player","ROUTE_GAME_BASE","id","allWidth"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {getDate, isArrayEmpty, isNotUndefined} from \"../../../services/UtilService\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\n\r\nconst CardSessions = (data) => {\r\n\r\n    const sessions = data.sessions;\r\n\r\n    const classes = useStyles();\r\n    if (sessions === undefined || sessions.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignitems=\"center\"\r\n            spacing={3}\r\n        >\r\n            {isNotUndefined(sessions) && !isArrayEmpty(sessions) ?\r\n                sessions.map((session, index) => {\r\n                    const startingDate = getDate(session.createdAt);\r\n                    const updatingDate = getDate(session.updatedAt);\r\n                    return (\r\n                        <Grid\r\n                            item\r\n                            xs={12}\r\n                            sm={6}\r\n                            key={index}\r\n                        >\r\n                            <Card variant=\"outlined\" className={classes.cards}>\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\" color=\"primary\" gutterBottom>\r\n                                        <strong> [ <em>{session.campaign.name}</em> ]</strong> : <strong>{session.name}</strong>\r\n                                    </Typography>\r\n\r\n                                    <div className={classes.chips}>\r\n                                        {\r\n                                            isNotUndefined(session.players) && !isArrayEmpty(session.players) ? (\r\n\r\n\r\n                                                session.players.map((player, index) => {\r\n                                                    return <Chip key={index} label={player.name} variant=\"outlined\"\r\n                                                                 color=\"primary\"/>\r\n                                                })\r\n\r\n\r\n                                            ) : null\r\n                                        }\r\n                                    </div>\r\n\r\n\r\n                                    <Typography color=\"textPrimary\" gutterBottom>\r\n                                        <strong>Date de départ :</strong> {startingDate}\r\n                                    </Typography>\r\n                                    <Typography color=\"textPrimary\" gutterBottom>\r\n                                        <strong>Date dernière action :</strong> {updatingDate}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Link component={RouterLink} to={ROUTE_GAME_BASE + '/' + session.id}\r\n                                          className={classes.allWidth}>\r\n                                        <Button\r\n                                            className={classes.allWidth}\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            size=\"small\"\r\n                                        >\r\n                                            Continuer la\r\n                                            Session\r\n                                        </Button>\r\n                                    </Link>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>)\r\n                }) :\r\n                <Skeleton/>\r\n            }\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default CardSessions;"]},"metadata":{},"sourceType":"module"}